*&---------------------------------------------------------------------*
*& Include          ZZ_3325_COMPANY_2_CLASSES
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Include          ZZ_3325_COMPAGNY_CLASSES
*&---------------------------------------------------------------------*

CLASS lcl_employee DEFINITION.

  PUBLIC SECTION.
  METHODS: constructor IMPORTING im_name TYPE string im_firstname TYPE string im_base_salary TYPE i im_dob TYPE d,
             set_name IMPORTING im_name TYPE string,
             set_firstname IMPORTING im_firstname TYPE string,
             set_adress IMPORTING im_adress TYPE string,
             set_dob IMPORTING im_dob TYPE d,
             get_name RETURNING VALUE(re_name) TYPE string,
             get_firstname RETURNING VALUE(re_firstname) TYPE string,
             get_adress RETURNING VALUE(re_adress) TYPE string,
             get_dob RETURNING VALUE(re_dob) TYPE d,
             get_base_salary RETURNING VALUE(re_base_salary) TYPE i,
             get_salary RETURNING VALUE(re_salary) TYPE i,
             get_full_name RETURNING VALUE(re_full_name) TYPE string,
             change_base_salary IMPORTING im_amount TYPE i,
             print.
  CLASS-METHODS get_n_o_employee EXPORTING ex_count TYPE i.

  PRIVATE SECTION.
    DATA: name TYPE string,
          firstname TYPE string,
          adress TYPE string,
          base_salary TYPE i,
          dob TYPE d.
    CLASS-DATA n_o_employee VALUE 0.
    METHODS init_base_salary IMPORTING VALUE(im_base_salary) TYPE i.
ENDCLASS.

CLASS lcl_office_employee DEFINITION INHERITING FROM lcl_employee.
  PUBLIC SECTION.
    METHODS: set_office IMPORTING im_office TYPE string,
             get_office RETURNING VALUE(re_office) TYPE string,
             constructor IMPORTING im_office TYPE string
               im_name TYPE string
               im_firstname TYPE string
               im_base_salary TYPE i
               im_dob TYPE d,
               print REDEFINITION.
  PRIVATE SECTION.
    DATA office TYPE string.
ENDCLASS.

CLASS lcl_field_staff DEFINITION INHERITING FROM lcl_employee.
   PUBLIC SECTION.
    METHODS: constructor IMPORTING im_percentage TYPE i im_sales TYPE i
               im_name TYPE string
               im_firstname TYPE string
               im_base_salary TYPE i
               im_dob TYPE d,
             set_percentage IMPORTING im_percentage TYPE p,
             get_percentage RETURNING VALUE(re_percentage) TYPE i,
             set_sales IMPORTING im_sales TYPE p,
             get_sales RETURNING VALUE(re_sales) type i,
             get_salary REDEFINITION,
             print REDEFINITION.
  PRIVATE SECTION.
    DATA percentage TYPE i.
    DATA sales TYPE i.
ENDCLASS.

CLASS lcl_department DEFINITION.
  PUBLIC SECTION.
    METHODS: constructor IMPORTING im_department_name TYPE string,
             set_department_name IMPORTING im_department_name TYPE string,
             get_department_name RETURNING VALUE(re_department_name) TYPE string,
             add_employee IMPORTING im_add_employee TYPE REF TO lcl_employee,
             avg_salary RETURNING VALUE(re_avg_salary) TYPE i,
             get_avg_percentage RETURNING VALUE(re_avg_percentage) TYPE i,
             print_department.
  PRIVATE SECTION.
    DATA department_name TYPE string.
    DATA it_employees TYPE TABLE OF REF TO lcl_employee.
ENDCLASS.

CLASS lcl_department IMPLEMENTATION.
  METHOD constructor.
    department_name = im_department_name.
  ENDMETHOD.
  METHOD set_department_name.
    department_name = im_department_name.
  ENDMETHOD.
  METHOD get_department_name.
   re_department_name = department_name.
  ENDMETHOD.
  METHOD add_employee.
    APPEND im_add_employee TO it_employees.
  ENDMETHOD.
  METHOD avg_salary.
    DATA: n_employee TYPE i, "Anzahl Mitarbeiter in der Abteilung.
          sum_salary TYPE i VALUE 0. "Gehaltsumme alle Mitarbeiter in der Abteilung.
     DATA r_employee TYPE REF TO lcl_employee.
    LOOP AT it_employees INTO r_employee.
       sum_salary = sum_salary + r_employee->get_salary( ).
       WRITE: / sum_salary.
    ENDLOOP.
    n_employee = lines( it_employees ).
      re_avg_salary = sum_salary / n_employee.
    WRITE: / 'Durchschnittsgehalt = ', re_avg_salary, '€'.
  ENDMETHOD.
  METHOD get_avg_percentage.
    DATA: n_field_staff TYPE i VALUE 0, "Anzahl der Außendienstmitarbeiter.
          sum_provisionsatz TYPE i VALUE 0. "summe Provision alle Außenmitarbeiter.
     DATA r_employee TYPE REF TO lcl_employee.
     DATA r_field_staff TYPE REF TO lcl_field_staff.
     LOOP AT it_employees INTO r_employee.
       TRY.
*        ich schreibe die Referenz r_employee in die Referenz r_field_staff.
*         Anweisungen, die nach der Zuweisung ?= stehen nur für r_field_staff ausgefürt werden.
         r_field_staff ?= r_employee.
         n_field_staff = n_field_staff + 1.
        sum_provisionsatz = sum_provisionsatz + r_field_staff->get_percentage( ).
        CATCH cx_sy_move_cast_error.
       ENDTRY.
    ENDLOOP.
      re_avg_percentage = sum_provisionsatz / n_field_staff.
    WRITE: / 'Durchschnittlicher provisionssatz = ', re_avg_percentage.
  ENDMETHOD.

  METHOD print_department.
    DATA r_employee TYPE REF TO lcl_employee.
    WRITE: / 'Abteilung: ', get_department_name( ).
    LOOP AT it_employees INTO r_employee.
      r_employee->print( ).
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_employee IMPLEMENTATION.
  METHOD constructor.
    add 1 to n_o_employee.
    name = im_name.
    firstname = im_firstname.
    base_salary = im_base_salary.
    dob = im_dob.
  ENDMETHOD.

  METHOD set_name.
    name = im_name.
  ENDMETHOD.

  METHOD set_firstname.
    firstname = im_firstname.
  ENDMETHOD.

  METHOD set_adress.
    adress = im_adress.
  ENDMETHOD.

  METHOD set_dob.
    dob = im_dob.
  ENDMETHOD.

  METHOD get_name.
    re_name = name.
  ENDMETHOD.

  METHOD get_firstname.
    re_firstname = firstname.
  ENDMETHOD.

  METHOD get_adress.
    re_adress = adress.
  ENDMETHOD.

  METHOD get_dob.
    re_dob = dob.
  ENDMETHOD.

  METHOD get_full_name.
    CONCATENATE firstname name INTO re_full_name SEPARATED BY ' '.
  ENDMETHOD.

METHOD init_base_salary.
  base_salary = 2000.
ENDMETHOD.

METHOD get_base_salary.
  re_base_salary = base_salary.
ENDMETHOD.

  METHOD change_base_salary.
    IF base_salary IS INITIAL.
      init_base_salary( base_salary ).
    ELSE.
      base_salary = 0.
    ENDIF.
  ENDMETHOD.

    METHOD get_salary.
      DATA age TYPE i.
    age = ( sy-datum - dob ) / 360.
     IF age > 40 AND age < 50.
          re_salary = ( get_base_salary( ) * 5 ) / 100 + get_base_salary( ).
      ELSEIF age > 50.
          re_salary = ( get_base_salary( ) * 10 ) / 100 + get_base_salary( ).
      ELSE.
          re_salary = get_base_salary( ).
     ENDIF.
  ENDMETHOD.

  METHOD get_n_o_employee.
    ex_count = n_o_employee.
    WRITE: /, / 'Es Wurden ', ex_count, ' employee gefunden.'.
  ENDMETHOD.

  METHOD print.
    WRITE: / 'Name: ', get_full_name( ), 30 'Adresse: ', adress, 70 'Gehalt: ', get_salary( ), '€', 100 'Geburtsdatum: ', dob DD/MM/YYYY.
  ENDMETHOD.

ENDCLASS.

CLASS lcl_office_employee IMPLEMENTATION.
  METHOD constructor.
    super->constructor( im_name = im_name
                        im_firstname = im_firstname
                        im_base_salary = im_base_salary
                        im_dob = im_dob ).
    office = im_office.
  ENDMETHOD.
  METHOD set_office.
    office = im_office.
  ENDMETHOD.
  METHOD get_office.
    re_office = office.
  ENDMETHOD.
  METHOD print.
    super->print( ).
    WRITE: office.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_field_staff IMPLEMENTATION.
  METHOD constructor.
    super->constructor( im_name = im_name
                        im_firstname = im_firstname
                        im_base_salary = im_base_salary
                        im_dob = im_dob ).
    percentage = im_percentage.
    sales = im_sales.
  ENDMETHOD.
METHOD set_sales.
  sales = im_sales.
ENDMETHOD.
METHOD get_sales.
  re_sales = sales.
ENDMETHOD.
METHOD set_percentage.
  percentage = im_percentage.
ENDMETHOD.
METHOD get_percentage.
  re_percentage = percentage.
ENDMETHOD.
METHOD get_salary.
   re_salary = get_base_salary( ) + sales * percentage / 100.
ENDMETHOD.
METHOD print.
  super->print( ).
  write: 'verkäufe: ', sales, 'Prov. ', percentage.
ENDMETHOD.
ENDCLASS.
