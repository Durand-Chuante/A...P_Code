method ONACTIONPR_LOESCHEN .
    DATA lo_nd_pruefungsergebnis TYPE REF TO if_wd_context_node.
    DATA message TYPE string.
    DATA lo_el_pruefungsergebnis TYPE REF TO if_wd_context_element.
    DATA ls_pruefungsergebnis TYPE wd_this->Element_pruefungsergebnis.

*   navigate from <CONTEXT> to <PRUEFUNGSERGEBNIS> via lead selection
    lo_nd_pruefungsergebnis = wd_context->get_child_node( name = wd_this->wdctx_pruefungsergebnis ).

*   @TODO handle non existant child
*   IF lo_nd_pruefungsergebnis IS INITIAL.
*   ENDIF.

*   get element via lead selection
    lo_el_pruefungsergebnis = lo_nd_pruefungsergebnis->get_element( ).
*   @TODO handle not set lead selection
    IF lo_el_pruefungsergebnis IS INITIAL.
    ENDIF.

*   get all declared attributes
    lo_el_pruefungsergebnis->get_static_attributes(
      IMPORTING
        static_attributes = ls_pruefungsergebnis ).
    DELETE ZZ3325_PRUEFUNG FROM ls_pruefungsergebnis.
    IF sy-subrc = 0.
*       get message manager
      data lo_api_controller     type ref to if_wd_controller.
      data lo_message_manager    type ref to if_wd_message_manager.

      lo_api_controller ?= wd_This->Wd_Get_Api( ).

      CALL METHOD lo_api_controller->GET_MESSAGE_MANAGER
        RECEIVING
          MESSAGE_MANAGER = lo_message_manager
          .

*       report message
      CALL METHOD lo_message_manager->REPORT_SUCCESS
        EXPORTING
          MESSAGE_TEXT              = 'Valid action'
*          PARAMS                    =
*          MSG_USER_DATA             =
*          IS_PERMANENT              = ABAP_FALSE
*          SCOPE_PERMANENT_MSG       = CO_MSG_SCOPE_CONTROLLER
*          VIEW                      =
*          SHOW_AS_POPUP             =
*          CONTROLLER_PERMANENT_MSG  =
*          MSG_INDEX                 =
*          CANCEL_NAVIGATION         =
*          ENABLE_MESSAGE_NAVIGATION =
*          COMPONENT                 =
        RECEIVING
          MESSAGE_ID                = message
          .
      ELSE.
*         get message manager
*        data lo_api_controller     type ref to if_wd_controller.
*        data lo_message_manager    type ref to if_wd_message_manager.

        lo_api_controller ?= wd_This->Wd_Get_Api( ).

        CALL METHOD lo_api_controller->GET_MESSAGE_MANAGER
          RECEIVING
            MESSAGE_MANAGER = lo_message_manager
            .

*         report message
        CALL METHOD lo_message_manager->REPORT_ERROR_MESSAGE
          EXPORTING
            MESSAGE_TEXT              = 'Invalid action'
*            PARAMS                    =
*            MSG_USER_DATA             =
*            IS_PERMANENT              = ABAP_FALSE
*            SCOPE_PERMANENT_MSG       = CO_MSG_SCOPE_CONTROLLER
*            VIEW                      =
*            SHOW_AS_POPUP             =
*            CONTROLLER_PERMANENT_MSG  =
*            MSG_INDEX                 =
*            CANCEL_NAVIGATION         =
*            ENABLE_MESSAGE_NAVIGATION =
*            COMPONENT                 =
          RECEIVING
            MESSAGE_ID                = message
            .


    ENDIF.

endmethod.
